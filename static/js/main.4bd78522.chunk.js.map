{"version":3,"sources":["components/Cell.js","components/Board.js","components/Settings.js","components/Game.js","components/Radios.js","components/GameOfLife.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","color","alive","style","backgroundColor","width","height","gridColumn","i","gridRow","j","Board","matrix","Array","n","fill","map","push","board","className","Settings","running","IconButton","aria-label","onClick","stop","start","refresh","Game","randomNBoard","percentage","Math","round","random","newBoard","setState","state","startInterval","interval","setInterval","prevState","nextBoard","stopInterval","clearInterval","nb0","x","y","nb1","nb2","nbEval","birth","length","aliveNeighbours","setN","bind","this","positions","Component","withStyles","root","green","checked","Radio","RadioButtons","React","useState","selectedValue","setSelectedValue","handleChange","event","target","value","change","onChange","GameOfLife","setEval","nb","parseInt","alignItems","App","withSettings","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bd78522.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Cell(props) {\n    const color = props.alive ? 'yellow' : 'black';\n    return (\n        <div style={{ backgroundColor: color, width: 8, height: 8, gridColumn: props.i, gridRow: props.j }}>\n        </div>\n    )\n}\n","import React from \"react\";\nimport Cell from './Cell.js';\nimport \"./board.css\";\n\nfunction Board(props) {\n    const matrix = Array(props.n).fill().map(() => [])\n    for (let i = 0; i < props.n; i++) {\n        matrix.push([])\n        for (let j = 0; j < props.n; j++) {\n            // Add 1 to row and column counter. CSS Grid is 1 indexed\n            matrix[i][j] = <Cell key={\"\" + i + j} alive={props.board[i][j]} i={i + 1} j={j + 1} />\n        }\n    }\n    return (\n        <div className=\"board-container\">\n            {\n                matrix\n            }\n        </div>\n    );\n}\n\nexport default Board;\n","import React from 'react'\nimport IconButton from '@material-ui/core/IconButton';\nimport RefreshIcon from '@material-ui/icons/RefreshSharp';\nimport Play from '@material-ui/icons/PlayArrowOutlined';\nimport Stop from '@material-ui/icons/PauseOutlined';\n\n\nexport default function Settings(props) {\n    return (\n        <div>\n            {\n                props.running ?\n                    <IconButton aria-label=\"delete\" color=\"secondary\" onClick={props.stop} >\n                        <Stop />\n                    </IconButton> :\n                    <IconButton aria-label=\"delete\" color=\"secondary\" onClick={props.start} >\n                        <Play />\n                    </IconButton>\n            }\n            <IconButton aria-label=\"delete\" color=\"secondary\" onClick={props.refresh} >\n                <RefreshIcon />\n            </IconButton>\n\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Board from './Board';\nimport Settings from './Settings';\n\nexport class Game extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            n: this.props.n,\n            board: this.randomNBoard(this.props.n, 0),\n            running: false\n        }\n        this.nextBoard = this.nextBoard.bind(this);\n        this.startInterval = this.startInterval.bind(this);\n        this.stopInterval = this.stopInterval.bind(this);\n    }\n    randomNBoard = (n, percentage) => {\n        return Array(n).fill().map(() => Array(n).fill().map(() => Math.round(Math.random() - percentage)));\n    }\n    newBoard = () => {\n        this.setState({\n            board: this.randomNBoard(this.state.n, 0)\n        });\n    }\n\n    startInterval = () => {\n        if (!this.state.running) {\n            this.setState({ running: true });\n            this.interval = setInterval(() => {\n                this.setState((prevState) => {\n                    let next = this.nextBoard(prevState.board);\n\n                    return (\n                        {\n                            board: next\n                        }\n                    )\n                }\n                )\n            }, 100);\n        }\n    }\n    stopInterval = () => {\n        if (this.state.running) {\n            this.setState({ running: false });\n            clearInterval(this.interval);\n        }\n    }\n\n\n    nb0 = (x, y) => {\n        return (x !== 0 || y !== 0);\n    }\n    nb1 = (x, y) => {\n        return x !== 0 && y !== 0;\n    }\n    nb2 = (x, y) => {\n        return x !== 1 && y !== 1;\n    }\n    nextBoard = (board) => {\n        let nbEval;\n        let birth = 2;\n        switch (this.props.nbEval) {\n            case 0:\n                nbEval = this.nb0;\n                birth = 3;\n                break;\n            case 1:\n                nbEval = this.nb1;\n                break;\n            case 2:\n                nbEval = this.nb2;\n                break;\n            default:\n                nbEval = this.nb0;\n                break;\n        }\n        // Assuming nxn board. Must be changed if nxm in the future\n        let newBoard = Array(board.length).fill().map(() => Array(board.length).fill().map(() => 0));\n        for (let i = 0; i < board.length; i++) {\n            for (let j = 0; j < board.length; j++) {\n                let aliveNeighbours = 0;\n                for (let x = -1; x < 2; x++) {\n                    for (let y = -1; y < 2; y++) {\n                        // Will only consider diagonal neighbours. Works well with dead nb 2 alive\n                        // x !== 0 && y !== 0\n\n                        // Reduce area from left upper corner\n                        // x !== 1 && y !== 1 nb 2\n\n                        // Original game of life\n                        // x !== 0 || y !== 0\n\n                        if (nbEval(x, y)) {\n                            if (!((i + x < 0) || (i + x >= board.length) || (j + y < 0) || (j + y >= board.length)) && board[j + y][i + x]) {\n                                aliveNeighbours += 1;\n                            }\n                        }\n                    }\n                }\n                if (board[j][i] === 1) {\n                    if (aliveNeighbours === 2 || aliveNeighbours === 3) {\n                        newBoard[j][i] = 1\n                    }\n                }\n                else {\n                    if (aliveNeighbours === birth) {\n                        newBoard[j][i] = 1\n                    }\n                }\n\n            }\n        }\n        return newBoard;\n    }\n    setN = (n) => {\n        this.setState({\n            n: n\n        });\n    }\n\n    componentWillUnmount() {\n        this.stopInterval();\n    }\n\n    render() {\n        return (\n            <div>\n                <Board\n                    positions={this.state.board}\n                    n={this.state.n}\n                    board={this.state.board} />\n                <Settings refresh={() => this.newBoard()} stop={() => this.stopInterval()} start={() => this.startInterval()} running={this.state.running} />\n            </div>\n        )\n    }\n}\n\nexport default Game\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport Radio from '@material-ui/core/Radio';\n\nconst GreenRadio = withStyles({\n    root: {\n        color: green[400],\n        '&$checked': {\n            color: green[600],\n        },\n    },\n    checked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\nexport default function RadioButtons(props) {\n    const [selectedValue, setSelectedValue] = React.useState(\"0\");\n\n    const handleChange = (event) => {\n        setSelectedValue(event.target.value);\n        props.change(event.target.value);\n    };\n    return (\n        <div>\n            <Radio\n                checked={selectedValue === \"0\"}\n                onChange={handleChange}\n                value={\"0\"}\n            />\n            <Radio\n                checked={selectedValue === \"1\"}\n                onChange={handleChange}\n                value={\"1\"}\n            />\n            <Radio\n                checked={selectedValue === \"2\"}\n                onChange={handleChange}\n                value={\"2\"}\n            />\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport Game from './Game';\nimport RadioButtons from './Radios'\n\nexport default class GameOfLife extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nbEval: 0,\n        }\n        this.setEval = this.setEval.bind(this);\n    }\n    setEval = (nb) => {\n        this.setState({\n            nbEval: parseInt(nb)\n        })\n    }\n    render() {\n        return (\n            <div style={{ alignItems: 'center' }}>\n                <RadioButtons change={(nb) => this.setEval(nb)} />\n                <Game n={this.props.n} nbEval={this.state.nbEval} />\n            </div>\n        )\n    }\n}\n","import './App.css';\nimport GameOfLife from './components/GameOfLife';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <GameOfLife n={80} withSettings={true} />\n        </div>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}